{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"FORUM\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Pick a topic:\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Add new text:\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"select\", {\n    id: \"textDropdown\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedTopicId = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.loadTexts && $options.loadTexts(...args))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.items, item => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: item.id,\n      key: item.id\n    }, _toDisplayString(item.topic), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelSelect, $data.selectedTopicId]]), _hoisted_4]), _createElementVNode(\"div\", null, [_hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"newText\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.newText = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newText]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.saveText && $options.saveText(...args))\n  }, \"Save\")]), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.textList, text => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: text.id\n    }, _toDisplayString(text.text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","id","$data","selectedTopicId","$event","onChange","_cache","args","$options","loadTexts","_Fragment","_renderList","items","item","value","key","topic","_hoisted_3","_hoisted_4","_hoisted_5","type","newText","onClick","saveText","textList","text"],"sources":["/home/nuksvaje/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FORUM</h1>\n    <div>\n      <h2>Pick a topic:</h2>\n      <select id=\"textDropdown\" v-model=\"selectedTopicId\" @change=\"loadTexts\">\n        <option v-for=\"item in items\" :value=\"item.id\" :key=\"item.id\">{{ item.topic }}</option>\n      </select>\n      <br>\n    </div>\n    <div>\n      <h2>Add new text:</h2>\n      <input type=\"text\" id=\"newText\" v-model=\"newText\">\n      <button @click=\"saveText\">Save</button>\n    </div>\n    <ul>\n      <li v-for=\"text in textList\" :key=\"text.id\">{{ text.text }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      items: [],\n      selectedTopicId: 0,\n      newText: '',\n      textList: [],\n    };\n  },\n  created() {\n    // Load topics from server on component creation\n    this.loadTopics();\n  },\n  methods: {\n    async loadTopics() {\n      // Send GET request to /topic_list to load topics from server\n      const response = await fetch('http://localhost:8000/topic_list');\n      const data = await response.json();\n      this.items = data.map((topic, index) => {\n        return { id: index + 1, topic: topic };\n      });\n    },\n    async loadTexts() {\n  // Send GET request to /texts_by_topic with selected topic ID to load texts from server\n  fetch(`http://localhost:8000/texts_by_topic/${this.selectedTopicId}`)\n    .then(response => response.json())\n    .then(data => {\n      this.textList = data;\n    })\n    .catch(error => {\n      console.error(error);\n    });\n},\n    async saveText() {\n      // Send POST request to /add to save new text to server\n      const response = await fetch('http://localhost:8000/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text: this.newText, topic_id: this.selectedTopicId + 1 }),\n      });\n      if (response.ok) {\n        this.newText = '';\n        this.loadTexts();\n      } else {\n        console.error('Failed to save text:', response.statusText);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAAc,YAAV,OAAK;gCAEPA,mBAAA,CAAsB,YAAlB,eAAa;;gCAIjBA,mBAAA,CAAI;gCAGJA,mBAAA,CAAsB,YAAlB,eAAa;;;uBAVrBC,mBAAA,CAiBM,cAhBJC,UAAc,EACdF,mBAAA,CAMM,cALJG,UAAsB,E,gBACtBH,mBAAA,CAES;IAFDI,EAAE,EAAC,cAAc;+DAAUC,KAAA,CAAAC,eAAe,GAAAC,MAAA;IAAGC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,SAAA,IAAAD,QAAA,CAAAC,SAAA,IAAAF,IAAA,CAAS;yBACpET,mBAAA,CAAuFY,SAAA,QAAAC,WAAA,CAAhET,KAAA,CAAAU,KAAK,EAAbC,IAAI;yBAAnBf,mBAAA,CAAuF;MAAxDgB,KAAK,EAAED,IAAI,CAACZ,EAAE;MAAGc,GAAG,EAAEF,IAAI,CAACZ;wBAAOY,IAAI,CAACG,KAAK,wBAAAC,UAAA;2FAD1Cf,KAAA,CAAAC,eAAe,E,GAGlDe,UAAI,C,GAENrB,mBAAA,CAIM,cAHJsB,UAAsB,E,gBACtBtB,mBAAA,CAAkD;IAA3CuB,IAAI,EAAC,MAAM;IAACnB,EAAE,EAAC,SAAS;+DAAUC,KAAA,CAAAmB,OAAO,GAAAjB,MAAA;iDAAPF,KAAA,CAAAmB,OAAO,E,GAChDxB,mBAAA,CAAuC;IAA9ByB,OAAK,EAAAhB,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAe,QAAA,IAAAf,QAAA,CAAAe,QAAA,IAAAhB,IAAA,CAAQ;KAAE,MAAI,E,GAEhCV,mBAAA,CAEK,c,kBADHC,mBAAA,CAAgEY,SAAA,QAAAC,WAAA,CAA7CT,KAAA,CAAAsB,QAAQ,EAAhBC,IAAI;yBAAf3B,mBAAA,CAAgE;MAAlCiB,GAAG,EAAEU,IAAI,CAACxB;wBAAOwB,IAAI,CAACA,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}