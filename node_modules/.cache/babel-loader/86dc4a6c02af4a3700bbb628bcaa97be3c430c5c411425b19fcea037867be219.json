{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"options\"\n}, \"Topic Filter: \", -1 /* HOISTED */);\nconst _hoisted_2 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"select\", {\n    name: \"options\",\n    id: \"options\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedTopic = $event)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.options, (option, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: index,\n      value: option.id\n    }, _toDisplayString(option.topic), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedTopic]])]);\n}","map":{"version":3,"names":["_createElementVNode","for","_createElementBlock","_hoisted_1","name","id","$data","selectedTopic","$event","_Fragment","_renderList","options","option","index","key","value","topic","_hoisted_2"],"sources":["/home/nuksvaje/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <label for=\"options\">Topic Filter: </label>\n    <select name=\"options\" id=\"options\" v-model=\"selectedTopic\">\n      <option v-for=\"(option, index) in options\" :key=\"index\" :value=\"option.id\">{{ option.topic }}</option>\n    </select>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"TopicFilter\",\n  data() {\n    return {\n      options: [],\n      selectedTopic: null,\n    };\n  },\n  mounted() {\n    // Make an API call to fetch the list of topics from the backend\n    fetch(\"http://localhost:8000/topic_list\")\n      .then((response) => response.json())\n      .then((data) => {\n        // Update the options array with the received data\n        this.options = data.map((topic) => {\n          return { id: topic.id, topic: topic.topic };\n        });\n      })\n      .catch((error) => console.error(error));\n  },\n};\n</script>"],"mappings":";gCAEIA,mBAAA,CAA2C;EAApCC,GAAG,EAAC;AAAS,GAAC,gBAAc;;;uBADrCC,mBAAA,CAKM,cAJJC,UAA2C,E,gBAC3CH,mBAAA,CAES;IAFDI,IAAI,EAAC,SAAS;IAACC,EAAE,EAAC,SAAS;+DAAUC,KAAA,CAAAC,aAAa,GAAAC,MAAA;yBACxDN,mBAAA,CAAsGO,SAAA,QAAAC,WAAA,CAApEJ,KAAA,CAAAK,OAAO,GAAzBC,MAAM,EAAEC,KAAK;yBAA7BX,mBAAA,CAAsG;MAA1DY,GAAG,EAAED,KAAK;MAAGE,KAAK,EAAEH,MAAM,CAACP;wBAAOO,MAAM,CAACI,KAAK,wBAAAC,UAAA;2EAD/CX,KAAA,CAAAC,aAAa,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}