{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"FORUM\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Pick a topic:\", -1 /* HOISTED */);\nconst _hoisted_3 = [\"value\"];\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Add new text:\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", null, [_hoisted_2, _withDirectives(_createElementVNode(\"select\", {\n    id: \"textDropdown\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedTopicId = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => _ctx.loadTexts && _ctx.loadTexts(...args))\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.items, item => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      value: item.id,\n      key: item.id\n    }, _toDisplayString(item.topic), 9 /* TEXT, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))], 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelSelect, _ctx.selectedTopicId]]), _hoisted_4]), _createElementVNode(\"div\", null, [_hoisted_5, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"newText\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.newText = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, _ctx.newText]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.saveText && _ctx.saveText(...args))\n  }, \"Save\")]), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.textList, text => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: text.id\n    }, _toDisplayString(text.text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","id","_ctx","selectedTopicId","$event","onChange","_cache","args","loadTexts","_Fragment","_renderList","items","item","value","key","topic","_hoisted_3","_hoisted_4","_hoisted_5","type","newText","onClick","saveText","textList","text"],"sources":["/home/nuksvaje/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FORUM</h1>\n    <div>\n      <h2>Pick a topic:</h2>\n      <select id=\"textDropdown\" v-model=\"selectedTopicId\" @change=\"loadTexts\">\n        <option v-for=\"item in items\" :value=\"item.id\" :key=\"item.id\">{{ item.topic }}</option>\n      </select>\n      <br>\n    </div>\n    <div>\n      <h2>Add new text:</h2>\n      <input type=\"text\" id=\"newText\" v-model=\"newText\">\n      <button @click=\"saveText\">Save</button>\n    </div>\n    <ul>\n      <li v-for=\"text in textList\" :key=\"text.id\">{{ text.text }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      items: [],\n      selectedTopicId: 0,\n      newText: '',\n      textList: [],\n    };\n  },\n  created() {\n    // Load topics from server on component creation\n    this.loadTopics();\n  },\n  methods: {\n    async loadTopics() {\n      // Send GET request to /topic_list to load topics from server\n      const response = await fetch('http://localhost:8000/topic_list');\n      const data = await response.json();\n      this.items = data.map((topic, index) => {\n        return { id: index +, topic: topic };\n      });\n      // Load texts for default topic on component creation\n      this.loadTexts();\n    },\n    async loadTexts() {\n      // Send GET request to /texts_by_topic with selected topic ID to load texts from server\n      const response = await fetch(`http://localhost:8000/texts_by_topic/${this.selectedTopicId}`);\n      const data = await response.json();\n      this.textList = data;\n    },\n    async saveText() {\n      // Send POST request to /add to save new text to server\n      const response = await fetch('http://localhost:8000/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text: this.newText, topic_id: this.selectedTopicId + 1 }),\n      });\n      if (response.ok) {\n        this.newText = '';\n        this.loadTexts();\n      } else {\n        console.error('Failed to save text:', response.statusText);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":";gCAEIA,mBAAA,CAAc,YAAV,OAAK;gCAEPA,mBAAA,CAAsB,YAAlB,eAAa;;gCAIjBA,mBAAA,CAAI;gCAGJA,mBAAA,CAAsB,YAAlB,eAAa;;;uBAVrBC,mBAAA,CAiBM,cAhBJC,UAAc,EACdF,mBAAA,CAMM,cALJG,UAAsB,E,gBACtBH,mBAAA,CAES;IAFDI,EAAE,EAAC,cAAc;+DAAUC,IAAA,CAAAC,eAAe,GAAAC,MAAA;IAAGC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEL,IAAA,CAAAM,SAAA,IAAAN,IAAA,CAAAM,SAAA,IAAAD,IAAA,CAAS;yBACpET,mBAAA,CAAuFW,SAAA,QAAAC,WAAA,CAAhER,IAAA,CAAAS,KAAK,EAAbC,IAAI;yBAAnBd,mBAAA,CAAuF;MAAxDe,KAAK,EAAED,IAAI,CAACX,EAAE;MAAGa,GAAG,EAAEF,IAAI,CAACX;wBAAOW,IAAI,CAACG,KAAK,wBAAAC,UAAA;2FAD1Cd,IAAA,CAAAC,eAAe,E,GAGlDc,UAAI,C,GAENpB,mBAAA,CAIM,cAHJqB,UAAsB,E,gBACtBrB,mBAAA,CAAkD;IAA3CsB,IAAI,EAAC,MAAM;IAAClB,EAAE,EAAC,SAAS;+DAAUC,IAAA,CAAAkB,OAAO,GAAAhB,MAAA;iDAAPF,IAAA,CAAAkB,OAAO,E,GAChDvB,mBAAA,CAAuC;IAA9BwB,OAAK,EAAAf,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEL,IAAA,CAAAoB,QAAA,IAAApB,IAAA,CAAAoB,QAAA,IAAAf,IAAA,CAAQ;KAAE,MAAI,E,GAEhCV,mBAAA,CAEK,c,kBADHC,mBAAA,CAAgEW,SAAA,QAAAC,WAAA,CAA7CR,IAAA,CAAAqB,QAAQ,EAAhBC,IAAI;yBAAf1B,mBAAA,CAAgE;MAAlCgB,GAAG,EAAEU,IAAI,CAACvB;wBAAOuB,IAAI,CAACA,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}