{"ast":null,"code":"export default {\n  data() {\n    return {\n      items: [],\n      selectedTopicId: 0,\n      newText: '',\n      textList: []\n    };\n  },\n  created() {\n    // Load topics from server on component creation\n    this.loadTopics();\n  },\n  methods: {\n    async loadTopics() {\n      // Send GET request to /topic_list to load topics from server\n      const response = await fetch('http://localhost:8000/topic_list');\n      const data = await response.json();\n      this.items = data.map((topic, index) => {\n        return {\n          id: index + 1,\n          topic: topic\n        };\n      });\n    },\n    async loadTexts() {\n      // Send GET request to /texts_by_topic with selected topic ID to load texts from server\n      fetch(`http://localhost:8000/texts_by_topic/${this.selectedTopicId}`).then(response => response.json()).then(data => {\n        this.textList = data;\n      }).catch(error => {\n        console.error(error);\n      });\n    },\n    async saveText() {\n      // Send POST request to /add to save new text to server\n      const response = await fetch('http://localhost:8000/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: this.newText,\n          topic_id: this.selectedTopicId + 1\n        })\n      });\n      if (response.ok) {\n        this.newText = '';\n        this.loadTexts();\n      } else {\n        console.error('Failed to save text:', response.statusText);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","items","selectedTopicId","newText","textList","created","loadTopics","methods","response","fetch","json","map","topic","index","id","loadTexts","then","catch","error","console","saveText","method","headers","body","JSON","stringify","text","topic_id","ok","statusText"],"sources":["/home/nuksvaje/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>FORUM</h1>\n    <div>\n      <h2>Pick a topic:</h2>\n      <select id=\"textDropdown\" v-model=\"selectedTopicId\" @change=\"loadTexts\">\n        <option v-for=\"item in items\" :value=\"item.id\" :key=\"item.id\">{{ item.topic }}</option>\n      </select>\n      <br>\n    </div>\n    <div>\n      <h2>Add new text:</h2>\n      <input type=\"text\" id=\"newText\" v-model=\"newText\">\n      <button @click=\"saveText\">Save</button>\n    </div>\n    <ul>\n      <li v-for=\"text in textList\" :key=\"text.id\">{{ text.text }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      items: [],\n      selectedTopicId: 0,\n      newText: '',\n      textList: [],\n    };\n  },\n  created() {\n    // Load topics from server on component creation\n    this.loadTopics();\n  },\n  methods: {\n    async loadTopics() {\n      // Send GET request to /topic_list to load topics from server\n      const response = await fetch('http://localhost:8000/topic_list');\n      const data = await response.json();\n      this.items = data.map((topic, index) => {\n        return { id: index + 1, topic: topic };\n      });\n    },\n    async loadTexts() {\n  // Send GET request to /texts_by_topic with selected topic ID to load texts from server\n  fetch(`http://localhost:8000/texts_by_topic/${this.selectedTopicId}`)\n    .then(response => response.json())\n    .then(data => {\n      this.textList = data;\n    })\n    .catch(error => {\n      console.error(error);\n    });\n},\n    async saveText() {\n      // Send POST request to /add to save new text to server\n      const response = await fetch('http://localhost:8000/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text: this.newText, topic_id: this.selectedTopicId + 1 }),\n      });\n      if (response.ok) {\n        this.newText = '';\n        this.loadTexts();\n      } else {\n        console.error('Failed to save text:', response.statusText);\n      }\n    },\n  },\n};\n</script>\n"],"mappings":"AAsBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,eAAe,EAAE,CAAC;MAClBC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,UAAU,EAAE;EACnB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,UAAUA,CAAA,EAAG;MACjB;MACA,MAAME,QAAO,GAAI,MAAMC,KAAK,CAAC,kCAAkC,CAAC;MAChE,MAAMT,IAAG,GAAI,MAAMQ,QAAQ,CAACE,IAAI,EAAE;MAClC,IAAI,CAACT,KAAI,GAAID,IAAI,CAACW,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QACtC,OAAO;UAAEC,EAAE,EAAED,KAAI,GAAI,CAAC;UAAED,KAAK,EAAEA;QAAM,CAAC;MACxC,CAAC,CAAC;IACJ,CAAC;IACD,MAAMG,SAASA,CAAA,EAAG;MACpB;MACAN,KAAK,CAAE,wCAAuC,IAAI,CAACP,eAAgB,EAAC,EACjEc,IAAI,CAACR,QAAO,IAAKA,QAAQ,CAACE,IAAI,EAAE,EAChCM,IAAI,CAAChB,IAAG,IAAK;QACZ,IAAI,CAACI,QAAO,GAAIJ,IAAI;MACtB,CAAC,EACAiB,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IACG,MAAME,QAAQA,CAAA,EAAG;MACf;MACA,MAAMZ,QAAO,GAAI,MAAMC,KAAK,CAAC,2BAA2B,EAAE;QACxDY,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAE,IAAI,CAACvB,OAAO;UAAEwB,QAAQ,EAAE,IAAI,CAACzB,eAAc,GAAI;QAAE,CAAC;MACjF,CAAC,CAAC;MACF,IAAIM,QAAQ,CAACoB,EAAE,EAAE;QACf,IAAI,CAACzB,OAAM,GAAI,EAAE;QACjB,IAAI,CAACY,SAAS,EAAE;MAClB,OAAO;QACLI,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEV,QAAQ,CAACqB,UAAU,CAAC;MAC5D;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}