{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"options\"\n}, \"Restaurant Filter: \", -1 /* HOISTED */);\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = {\n  key: 0,\n  class: \"popup\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newText = $event),\n    placeholder: \"Enter new text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newText]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.addText && $options.addText(...args))\n  }, \"Add\"), _createElementVNode(\"div\", null, [_hoisted_1, _withDirectives(_createElementVNode(\"select\", {\n    name: \"options\",\n    id: \"options\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.selectedRestaurant = $event)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.options, (option, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: index,\n      value: option.id\n    }, _toDisplayString(option.restaurant_name), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, _ctx.selectedRestaurant]])]), _createElementVNode(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.textList, (text, index) => {\n    return _openBlock(), _createElementBlock(\"p\", {\n      key: index,\n      class: \"text-item\"\n    }, _toDisplayString(text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.popupVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"h2\", null, _toDisplayString($data.selectedTopic), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Here's some information about \" + _toDisplayString($data.selectedTopic) + \"...\", 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.closePopup && $options.closePopup(...args))\n  }, \"Close\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","for","class","_createElementBlock","$data","newText","$event","placeholder","onClick","_cache","args","$options","addText","_hoisted_1","name","id","_ctx","selectedRestaurant","_Fragment","_renderList","options","option","index","key","value","restaurant_name","_hoisted_2","textList","text","popupVisible","_hoisted_3","_toDisplayString","selectedTopic","closePopup"],"sources":["/home/nuksvaje/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <input v-model=\"newText\" placeholder=\"Enter new text\" />\n    <button @click=\"addText\">Add</button>\n    <div>\n      <label for=\"options\">Restaurant Filter: </label>\n      <select name=\"options\" id=\"options\" v-model=\"selectedRestaurant\">\n        <option v-for=\"(option, index) in options\" :key=\"index\" :value=\"option.id\">{{ option.restaurant_name }}</option>\n      </select>\n    </div>\n    <div>\n      <p v-for=\"(text, index) in textList\" :key=\"index\" class=\"text-item\">\n        {{ text }}\n      </p>\n    </div>\n\n    <div v-if=\"popupVisible\" class=\"popup\">\n      <h2>{{ selectedTopic }}</h2>\n      <p>Here's some information about {{ selectedTopic }}...</p>\n      <button @click=\"closePopup\">Close</button>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      newText: \"\",\n      textList: [],\n      topicList: [],\n      popupVisible: false,\n      selectedTopic: \"\",\n    };\n  },\n  created() {\n    // Make an API call to get all previous texts and update the textList property\n    fetch(\"http://localhost:8000/text_list\")\n      .then(response => response.json())\n      .then(data => {\n        this.textList = data;\n      })\n      .catch(error => {\n        console.error(error);\n      });\n\n    // Make an API call to get all previous topics and update the topicList property\n    fetch(\"http://localhost:8000/topic_list\")\n      .then(response => response.json())\n      .then(data => {\n        this.topicList = data;\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  },\n  methods: {\n    addText() {\n      if (this.newText) {\n        // Make an API call to add the new text\n        fetch(\"http://localhost:8000/add\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ text: this.newText })\n        })\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(\"Failed to add text\");\n            }\n            // Update the textList property with the new text\n            this.textList.push(this.newText);\n            this.newText = \"\";\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      }\n    },\n\n    openPopup(topic) {\n      this.popupVisible = true;\n      this.selectedTopic = topic;\n    },\n\n    closePopup() {\n      this.popupVisible = false;\n      this.selectedTopic = \"\";\n    },\n  }\n};\n</script>\n\n<style>\n.text-item {\n  border: 1px solid black;\n  padding: 10px;\n}\n\n.topics-container {\n  margin-bottom: 10px;\n}\n\n.topic-button {\n  margin-right: 10px;\n}\n\n.popup {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: white;\n  border: 1px solid black;\n  padding: 20px;\n  z-index: 999;\n}\n</style>\n"],"mappings":";gCAKMA,mBAAA,CAAgD;EAAzCC,GAAG,EAAC;AAAS,GAAC,qBAAmB;;;;EAWjBC,KAAK,EAAC;;;uBAfjCC,mBAAA,CAoBM,c,gBAnBJH,mBAAA,CAAwD;+DAAxCI,KAAA,CAAAC,OAAO,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAArBH,KAAA,CAAAC,OAAO,E,GACvBL,mBAAA,CAAqC;IAA5BQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,OAAA,IAAAD,QAAA,CAAAC,OAAA,IAAAF,IAAA,CAAO;KAAE,KAAG,GAC5BV,mBAAA,CAKM,cAJJa,UAAgD,E,gBAChDb,mBAAA,CAES;IAFDc,IAAI,EAAC,SAAS;IAACC,EAAE,EAAC,SAAS;+DAAUC,IAAA,CAAAC,kBAAkB,GAAAX,MAAA;yBAC7DH,mBAAA,CAAgHe,SAAA,QAAAC,WAAA,CAA9EH,IAAA,CAAAI,OAAO,GAAzBC,MAAM,EAAEC,KAAK;yBAA7BnB,mBAAA,CAAgH;MAApEoB,GAAG,EAAED,KAAK;MAAGE,KAAK,EAAEH,MAAM,CAACN;wBAAOM,MAAM,CAACI,eAAe,wBAAAC,UAAA;2EADzDV,IAAA,CAAAC,kBAAkB,E,KAIjEjB,mBAAA,CAIM,e,kBAHJG,mBAAA,CAEIe,SAAA,QAAAC,WAAA,CAFuBf,KAAA,CAAAuB,QAAQ,GAAxBC,IAAI,EAAEN,KAAK;yBAAtBnB,mBAAA,CAEI;MAFkCoB,GAAG,EAAED,KAAK;MAAEpB,KAAK,EAAC;wBACnD0B,IAAI;oCAIAxB,KAAA,CAAAyB,YAAY,I,cAAvB1B,mBAAA,CAIM,OAJN2B,UAIM,GAHJ9B,mBAAA,CAA4B,YAAA+B,gBAAA,CAArB3B,KAAA,CAAA4B,aAAa,kBACpBhC,mBAAA,CAA2D,WAAxD,gCAA8B,GAAA+B,gBAAA,CAAG3B,KAAA,CAAA4B,aAAa,IAAG,KAAG,iBACvDhC,mBAAA,CAA0C;IAAjCQ,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAsB,UAAA,IAAAtB,QAAA,CAAAsB,UAAA,IAAAvB,IAAA,CAAU;KAAE,OAAK,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}