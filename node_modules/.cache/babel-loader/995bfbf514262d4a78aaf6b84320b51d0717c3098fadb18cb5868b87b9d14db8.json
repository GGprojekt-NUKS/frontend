{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newText = $event),\n    placeholder: \"Enter new text\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newText]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.addText && $options.addText(...args))\n  }, \"Add\"), _createElementVNode(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.textList, (text, index) => {\n    return _openBlock(), _createElementBlock(\"p\", {\n      key: index,\n      class: \"text-item\"\n    }, _toDisplayString(text), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","$data","newText","$event","placeholder","onClick","_cache","args","$options","addText","_Fragment","_renderList","textList","text","index","key","class"],"sources":["/home/nuksvaje/frontend/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <input v-model=\"newText\" placeholder=\"Enter new text\" />\n    <button @click=\"addText\">Add</button>\n    <div>\n      <p v-for=\"(text, index) in textList\" :key=\"index\" class=\"text-item\">\n        {{ text }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      newText: \"\",\n      textList: []\n    };\n  },\n  created() {\n    // Make an API call to get all previous texts and update the textList property\n    fetch(\"http://localhost:8000/text_list\")\n      .then(response => response.json())\n      .then(data => {\n        this.textList = data;\n      })\n      .catch(error => {\n        console.error(error);\n      });\n  },\n  methods: {\n    addText() {\n      if (this.newText) {\n        // Make an API call to add the new text\n        fetch(\"http://localhost:8000/add\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({ text: this.newText })\n        })\n          .then(response => {\n            if (!response.ok) {\n              throw new Error(\"Failed to add text\");\n            }\n            // Update the textList property with the new text\n            this.textList.push(this.newText);\n            this.newText = \"\";\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      }\n    }\n  }\n};\n</script>\n\n<style>\n.text-item {\n  border: 1px solid black;\n  padding: 10px;\n}\n</style>\n"],"mappings":";;uBACEA,mBAAA,CAQM,c,gBAPJC,mBAAA,CAAwD;+DAAxCC,KAAA,CAAAC,OAAO,GAAAC,MAAA;IAAEC,WAAW,EAAC;iDAArBH,KAAA,CAAAC,OAAO,E,GACvBF,mBAAA,CAAqC;IAA5BK,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,OAAA,IAAAD,QAAA,CAAAC,OAAA,IAAAF,IAAA,CAAO;KAAE,KAAG,GAC5BP,mBAAA,CAIM,e,kBAHJD,mBAAA,CAEIW,SAAA,QAAAC,WAAA,CAFuBV,KAAA,CAAAW,QAAQ,GAAxBC,IAAI,EAAEC,KAAK;yBAAtBf,mBAAA,CAEI;MAFkCgB,GAAG,EAAED,KAAK;MAAEE,KAAK,EAAC;wBACnDH,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}